/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianTengwar
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  isHighlightedTehtar: true,
  tehtarColor: "#A78AF9",
  tengFont: "Tengwar Annatar",
  tengCsurFont: "Tengwar Formal CSUR"
};
var ObsidianTengwar = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor("teng", (source, el, ctx) => {
      const targetSymbol = (tehtar) => `<span style="color: ${this.settings.tehtarColor}">${tehtar}</span>`;
      const tengCsurRegExp = /[\uE040-\uE05D]+/g;
      const isTengCsur = tengCsurRegExp.test(source);
      const replacedEntersSource = source.replaceAll(/\n/g, "<br />");
      const formatted = replacedEntersSource.replaceAll(tengCsurRegExp, targetSymbol);
      const className = isTengCsur ? "tengwar-csur" : "tengwar-annatar";
      const resultSource = this.settings.isHighlightedTehtar ? formatted : replacedEntersSource;
      el.innerHTML = `<div class="${className}">${resultSource}</div>`;
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Turn on Tehtar highlighting").setDesc("Signs and symbols written above or below letters will be highlighted").addToggle((text) => text.setValue(this.plugin.settings.isHighlightedTehtar).onChange(async (value) => {
      this.plugin.settings.isHighlightedTehtar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Color").setDesc("Color of highlighted Tehtars").addColorPicker((color) => color.setValue(this.plugin.settings.tehtarColor).onChange(async (value) => {
      this.plugin.settings.tehtarColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar CSUR font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBNb2RhbCwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbnRlcmZhY2UgT2JzaWRpYW5UZW5nd2FyU2V0dGluZ3Mge1xuXHRpc0hpZ2hsaWdodGVkVGVodGFyOiBib29sZWFuO1xuXHR0ZWh0YXJDb2xvcjogc3RyaW5nO1xuXHR0ZW5nRm9udDogc3RyaW5nO1xuXHR0ZW5nQ3N1ckZvbnQ6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogT2JzaWRpYW5UZW5nd2FyU2V0dGluZ3MgPSB7XG5cdGlzSGlnaGxpZ2h0ZWRUZWh0YXI6IHRydWUsXG5cdHRlaHRhckNvbG9yOiAnI0E3OEFGOScsXG5cdHRlbmdGb250OiAnVGVuZ3dhciBBbm5hdGFyJyxcblx0dGVuZ0NzdXJGb250OiAnVGVuZ3dhciBGb3JtYWwgQ1NVUicsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ic2lkaWFuVGVuZ3dhciBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBPYnNpZGlhblRlbmd3YXJTZXR0aW5ncztcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBjb2RlIGJsb2NrIHByb2Nlc3NvciBmb3IgJ3RlbmcnXG5cdFx0ICovXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKCd0ZW5nJywgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVuZGVyIGNoZXNzIGJvYXJkXG5cdFx0XHRjb25zdCB0YXJnZXRTeW1ib2wgPSAodGVodGFyOiBzdHJpbmcpID0+IGA8c3BhbiBzdHlsZT1cImNvbG9yOiAke3RoaXMuc2V0dGluZ3MudGVodGFyQ29sb3J9XCI+JHt0ZWh0YXJ9PC9zcGFuPmA7XG5cblx0XHRcdGNvbnN0IHRlbmdDc3VyUmVnRXhwID0gL1tcXHVFMDQwLVxcdUUwNURdKy9nO1xuXG5cdFx0XHRjb25zdCBpc1RlbmdDc3VyID0gdGVuZ0NzdXJSZWdFeHAudGVzdChzb3VyY2UpO1xuXG5cdFx0XHRjb25zdCByZXBsYWNlZEVudGVyc1NvdXJjZSA9IHNvdXJjZS5yZXBsYWNlQWxsKC9cXG4vZywgJzxiciAvPicpO1xuXHRcdFx0Y29uc3QgZm9ybWF0dGVkID0gcmVwbGFjZWRFbnRlcnNTb3VyY2UucmVwbGFjZUFsbCh0ZW5nQ3N1clJlZ0V4cCwgdGFyZ2V0U3ltYm9sKTtcblxuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gaXNUZW5nQ3N1ciA/ICd0ZW5nd2FyLWNzdXInIDogJ3Rlbmd3YXItYW5uYXRhcic7XG5cblx0XHRcdGNvbnN0IHJlc3VsdFNvdXJjZSA9IHRoaXMuc2V0dGluZ3MuaXNIaWdobGlnaHRlZFRlaHRhciA/IGZvcm1hdHRlZCA6IHJlcGxhY2VkRW50ZXJzU291cmNlO1xuXG4gICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cIiR7Y2xhc3NOYW1lfVwiPiR7cmVzdWx0U291cmNlfTwvZGl2PmA7XG4gICAgICAgIH0pO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHQgKi9cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFNhbXBsZVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5jbGFzcyBTYW1wbGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcblx0Y29uc3RydWN0b3IoYXBwOiBBcHApIHtcblx0XHRzdXBlcihhcHApO1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpcztcblx0XHRjb250ZW50RWwuc2V0VGV4dCgnV29haCEnKTtcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0Y29uc3Qge2NvbnRlbnRFbH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbmNsYXNzIFNhbXBsZVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBPYnNpZGlhblRlbmd3YXI7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogT2JzaWRpYW5UZW5nd2FyKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdUdXJuIG9uIFRlaHRhciBoaWdobGlnaHRpbmcnKVxuXHRcdFx0LnNldERlc2MoJ1NpZ25zIGFuZCBzeW1ib2xzIHdyaXR0ZW4gYWJvdmUgb3IgYmVsb3cgbGV0dGVycyB3aWxsIGJlIGhpZ2hsaWdodGVkJylcblx0XHRcdC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pc0hpZ2hsaWdodGVkVGVodGFyKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNIaWdobGlnaHRlZFRlaHRhciA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnQ29sb3InKVxuXHRcdC5zZXREZXNjKCdDb2xvciBvZiBoaWdobGlnaHRlZCBUZWh0YXJzJylcblx0XHQuYWRkQ29sb3JQaWNrZXIoY29sb3IgPT4gY29sb3Jcblx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZWh0YXJDb2xvcilcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudGVodGFyQ29sb3IgPSB2YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR9KSk7XG5cdFx0XG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0LnNldE5hbWUoJ1Rlbmd3YXIgQ1NVUiBmb250Jylcblx0XHQuc2V0RGVzYygnSW4gUHJvZ3Jlc3MnKVxuXHRcdC5hZGREcm9wZG93bih0ZXh0ID0+IHRleHRcblx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW5nRm9udClcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudGVuZ0ZvbnQgPSB2YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR9KSk7XG5cdFx0XG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0LnNldE5hbWUoJ1Rlbmd3YXIgZm9udCcpXG5cdFx0LnNldERlc2MoJ0luIFByb2dyZXNzJylcblx0XHQuYWRkRHJvcGRvd24odGV4dCA9PiB0ZXh0XG5cdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudGVuZ0ZvbnQpXG5cdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbmdGb250ID0gdmFsdWU7XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0fSkpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQThEO0FBUzlELElBQU0sbUJBQTRDO0FBQUEsRUFDakQscUJBQXFCO0FBQUEsRUFDckIsYUFBYTtBQUFBLEVBQ2IsVUFBVTtBQUFBLEVBQ1YsY0FBYztBQUNmO0FBRUEsSUFBcUIsa0JBQXJCLGNBQTZDLHVCQUFPO0FBQUEsRUFHbkQsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFLeEIsU0FBSyxtQ0FBbUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxRQUFRO0FBRXBFLFlBQU0sZUFBZSxDQUFDLFdBQW1CLHVCQUF1QixLQUFLLFNBQVMsZ0JBQWdCO0FBRTlGLFlBQU0saUJBQWlCO0FBRXZCLFlBQU0sYUFBYSxlQUFlLEtBQUssTUFBTTtBQUU3QyxZQUFNLHVCQUF1QixPQUFPLFdBQVcsT0FBTyxRQUFRO0FBQzlELFlBQU0sWUFBWSxxQkFBcUIsV0FBVyxnQkFBZ0IsWUFBWTtBQUU5RSxZQUFNLFlBQVksYUFBYSxpQkFBaUI7QUFFaEQsWUFBTSxlQUFlLEtBQUssU0FBUyxzQkFBc0IsWUFBWTtBQUU1RCxTQUFHLFlBQVksZUFBZSxjQUFjO0FBQUEsSUFDaEQsQ0FBQztBQUtQLFNBQUssY0FBYyxJQUFJLGlCQUFpQixLQUFLLEtBQUssSUFBSSxDQUFDO0FBQUEsRUFDeEQ7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUVYO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQ0Q7QUFrQkEsSUFBTSxtQkFBTixjQUErQixpQ0FBaUI7QUFBQSxFQUcvQyxZQUFZLEtBQVUsUUFBeUI7QUFDOUMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDZjtBQUFBLEVBRUEsVUFBZ0I7QUFDZixVQUFNLEVBQUMsWUFBVyxJQUFJO0FBRXRCLGdCQUFZLE1BQU07QUFFbEIsUUFBSSx3QkFBUSxXQUFXLEVBQ3JCLFFBQVEsNkJBQTZCLEVBQ3JDLFFBQVEsc0VBQXNFLEVBQzlFLFVBQVUsVUFBUSxLQUNqQixTQUFTLEtBQUssT0FBTyxTQUFTLG1CQUFtQixFQUNqRCxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxzQkFBc0I7QUFDM0MsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2hDLENBQUMsQ0FBQztBQUVKLFFBQUksd0JBQVEsV0FBVyxFQUN0QixRQUFRLE9BQU8sRUFDZixRQUFRLDhCQUE4QixFQUN0QyxlQUFlLFdBQVMsTUFDdkIsU0FBUyxLQUFLLE9BQU8sU0FBUyxXQUFXLEVBQ3pDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLFdBQUssT0FBTyxTQUFTLGNBQWM7QUFDbkMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2hDLENBQUMsQ0FBQztBQUVILFFBQUksd0JBQVEsV0FBVyxFQUN0QixRQUFRLG1CQUFtQixFQUMzQixRQUFRLGFBQWEsRUFDckIsWUFBWSxVQUFRLEtBQ25CLFNBQVMsS0FBSyxPQUFPLFNBQVMsUUFBUSxFQUN0QyxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxXQUFXO0FBQ2hDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFFSCxRQUFJLHdCQUFRLFdBQVcsRUFDdEIsUUFBUSxjQUFjLEVBQ3RCLFFBQVEsYUFBYSxFQUNyQixZQUFZLFVBQVEsS0FDbkIsU0FBUyxLQUFLLE9BQU8sU0FBUyxRQUFRLEVBQ3RDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLFdBQUssT0FBTyxTQUFTLFdBQVc7QUFDaEMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2hDLENBQUMsQ0FBQztBQUFBLEVBQ0o7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
