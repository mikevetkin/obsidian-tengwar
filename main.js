/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianTengwar
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  isHighlightedLuvas: true,
  tengFont: "Tengwar Annatar",
  tengCsurFont: "Tengwar Formal CSUR"
};
var ObsidianTengwar = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor("teng", (source, el, ctx) => {
      const targetSymbol = (luva) => `<span class="luva">${luva}</span>`;
      const tengCsurRegExp = /[\uE040-\uE05D]+/g;
      const isTengCsur = tengCsurRegExp.test(source);
      const replacedEntersSource = source.replaceAll(/\n/g, "<br />");
      const formatted = replacedEntersSource.replaceAll(tengCsurRegExp, targetSymbol);
      const className = isTengCsur ? "tengwar-csur" : "tengwar";
      const resultSource = this.settings.isHighlightedLuvas ? formatted : replacedEntersSource;
      el.innerHTML = `<div class="${className}">${resultSource}</div>`;
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.registerMarkdownCodeBlockProcessor("teng", (source, el, ctx) => {
      const targetSymbol = (luva) => `<span class="luva">${luva}</span>`;
      const tengCsurRegExp = /[\uE040-\uE05D]+/g;
      const isTengCsur = tengCsurRegExp.test(source);
      const replacedEntersSource = source.replaceAll(/\n/g, "<br />");
      const formatted = replacedEntersSource.replaceAll(tengCsurRegExp, targetSymbol);
      const className = isTengCsur ? "tengwar-csur" : "tengwar";
      const resultSource = this.settings.isHighlightedLuvas ? formatted : replacedEntersSource;
      el.innerHTML = `<div class="${className}">${resultSource}</div>`;
    });
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Turn on Luvas highlighting").setDesc("The vowels will be highlighted").addToggle((text) => text.setValue(this.plugin.settings.isHighlightedLuvas).onChange(async (value) => {
      this.plugin.settings.isHighlightedLuvas = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar CSUR font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
