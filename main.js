/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianTengwar
});
module.exports = __toCommonJS(main_exports);

// feature/settings/domain/entity/plugin-settings.ts
var pluginSettings = (data = {}) => ({
  isHighlightedTehtar: false,
  tehtarColor: "",
  tengCsurFont: "",
  tengFont: "",
  ...data
});

// feature/settings/domain/entity/default-plugin-settings.ts
var DEFAULT_PLUGIN_SETTINGS = pluginSettings({
  isHighlightedTehtar: true,
  tehtarColor: "#A78AF9",
  tengFont: "Tengwar Annatar",
  tengCsurFont: "Tengwar Formal CSUR"
});

// feature/settings/ui/settings-tab.ts
var import_obsidian = require("obsidian");
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Turn on Tehtar highlighting").setDesc("Signs and symbols written above or below letters will be highlighted").addToggle((text) => text.setValue(this.plugin.settings.isHighlightedTehtar).onChange(async (value) => {
      this.plugin.settings.isHighlightedTehtar = value;
      await this.plugin.saveSettings();
      this.plugin.refresh();
    }));
    new import_obsidian.Setting(containerEl).setName("Color").setDesc("Color of highlighted Tehtars").addColorPicker((color) => color.setValue(this.plugin.settings.tehtarColor).onChange(async (value) => {
      this.plugin.settings.tehtarColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar CSUR font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
    }));
  }
};

// feature/tengwar/domain/entity/csurTengwar.ts
var TENGWAR_CSUR_REG_EXP = /[\uE000-\uE06E]+/g;
var TENGWAR_TEHTAR_CSUR_REG_EXP = /[\uE040-\uE05D]+/g;

// feature/tengwar/ui/teng-processor.ts
var processCsur = (source, settings) => {
  const className = "tengwar-formal-csur";
  const innerHTML = settings.isHighlightedTehtar ? highlightCsurTehtars(source, settings) : source;
  return `<div class="${className}">${innerHTML}</div>`;
};
var highlightCsurTehtars = (source, settings) => {
  return source.replaceAll(
    TENGWAR_TEHTAR_CSUR_REG_EXP,
    (tehtar) => `<span class="tehtar" style="color: ${settings.tehtarColor}">${tehtar}</span>`
  );
};
var processAscii = (source) => {
  const className = "tengwar-annatar";
  return `<div class="${className}">${source}</div>`;
};
var getEncoding = (source) => {
  if (TENGWAR_CSUR_REG_EXP.test(source)) {
    return "CSUR";
  }
  return "ASCII";
};
var processTengwar = (source, settings) => {
  const innerHTML = source.replaceAll(/\n/g, "<br />");
  switch (getEncoding(source)) {
    case "CSUR":
      return processCsur(innerHTML, settings);
    case "ASCII":
      return processAscii(innerHTML);
  }
};
var tengProcessor = (settings) => (source, el, _ctx) => {
  el.innerHTML = processTengwar(source, settings);
};

// main.ts
var import_obsidian2 = require("obsidian");
var ObsidianTengwar = class extends import_obsidian2.Plugin {
  refresh() {
    const elements = document.querySelectorAll(".tehtar");
    elements.forEach((element) => element.classList.toggle("clear-tehtar"));
    console.log("elements :>> ", elements);
  }
  async onload() {
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor("teng", tengProcessor(this.settings));
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_PLUGIN_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJmZWF0dXJlL3NldHRpbmdzL2RvbWFpbi9lbnRpdHkvcGx1Z2luLXNldHRpbmdzLnRzIiwgImZlYXR1cmUvc2V0dGluZ3MvZG9tYWluL2VudGl0eS9kZWZhdWx0LXBsdWdpbi1zZXR0aW5ncy50cyIsICJmZWF0dXJlL3NldHRpbmdzL3VpL3NldHRpbmdzLXRhYi50cyIsICJmZWF0dXJlL3Rlbmd3YXIvZG9tYWluL2VudGl0eS9jc3VyVGVuZ3dhci50cyIsICJmZWF0dXJlL3Rlbmd3YXIvdWkvdGVuZy1wcm9jZXNzb3IudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IERFRkFVTFRfUExVR0lOX1NFVFRJTkdTIH0gZnJvbSAnZmVhdHVyZS9zZXR0aW5ncy9kb21haW4vZW50aXR5L2RlZmF1bHQtcGx1Z2luLXNldHRpbmdzJztcbmltcG9ydCB7IFBsdWdpblNldHRpbmdzIH0gZnJvbSAnZmVhdHVyZS9zZXR0aW5ncy9kb21haW4vZW50aXR5L3BsdWdpbi1zZXR0aW5ncyc7XG5pbXBvcnQgeyBTZXR0aW5nc1RhYiB9IGZyb20gJ2ZlYXR1cmUvc2V0dGluZ3MvdWkvc2V0dGluZ3MtdGFiJztcbmltcG9ydCB7IHRlbmdQcm9jZXNzb3IgfSBmcm9tICdmZWF0dXJlL3Rlbmd3YXIvdWkvdGVuZy1wcm9jZXNzb3InO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYnNpZGlhblRlbmd3YXIgZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogUGx1Z2luU2V0dGluZ3M7XG5cblx0cmVmcmVzaCgpIHtcblx0XHRjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGVodGFyXCIpO1xuXG5cdFx0ZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4gZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiY2xlYXItdGVodGFyXCIpKTtcblxuXHRcdGNvbnNvbGUubG9nKCdlbGVtZW50cyA6Pj4gJywgZWxlbWVudHMpO1xuXHRcdC8vIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFodGFyJyk7XG5cblx0XHQvLyBBcnJheS5mcm9tKGVsZW1lbnRzKS5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykpXG5cdH1cblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBjb2RlIGJsb2NrIHByb2Nlc3NvciBmb3IgJ3RlbmcnXG5cdFx0ICovXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKCd0ZW5nJywgdGVuZ1Byb2Nlc3Nvcih0aGlzLnNldHRpbmdzKSk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxuXHRcdCAqL1xuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge31cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfUExVR0lOX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cbn1cbiIsICIvKipcbiAqIFNldHRpbmdzIG9mIHRoaXMgcGx1Z2luXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luU2V0dGluZ3Mge1xuXHRpc0hpZ2hsaWdodGVkVGVodGFyOiBib29sZWFuO1xuXHR0ZWh0YXJDb2xvcjogc3RyaW5nO1xuXHR0ZW5nRm9udDogc3RyaW5nO1xuXHR0ZW5nQ3N1ckZvbnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IHBsdWdpblNldHRpbmdzID0gKGRhdGE6IFBhcnRpYWw8UGx1Z2luU2V0dGluZ3M+ID0ge30pOiBQbHVnaW5TZXR0aW5ncyA9PiAoe1xuXHRpc0hpZ2hsaWdodGVkVGVodGFyOiBmYWxzZSxcblx0dGVodGFyQ29sb3I6ICcnLFxuXHR0ZW5nQ3N1ckZvbnQ6ICcnLFxuXHR0ZW5nRm9udDogJycsXG5cdC4uLmRhdGEsXG4gIH0pO1xuICAiLCAiaW1wb3J0IHsgcGx1Z2luU2V0dGluZ3MsIFBsdWdpblNldHRpbmdzIH0gZnJvbSBcIi4vcGx1Z2luLXNldHRpbmdzXCI7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BMVUdJTl9TRVRUSU5HUyA9IHBsdWdpblNldHRpbmdzKHtcblx0aXNIaWdobGlnaHRlZFRlaHRhcjogdHJ1ZSxcblx0dGVodGFyQ29sb3I6ICcjQTc4QUY5Jyxcblx0dGVuZ0ZvbnQ6ICdUZW5nd2FyIEFubmF0YXInLFxuXHR0ZW5nQ3N1ckZvbnQ6ICdUZW5nd2FyIEZvcm1hbCBDU1VSJyxcbn0pXG4iLCAiaW1wb3J0IE9ic2lkaWFuVGVuZ3dhciBmcm9tICdtYWluJztcbmltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogT2JzaWRpYW5UZW5nd2FyO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE9ic2lkaWFuVGVuZ3dhcikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnVHVybiBvbiBUZWh0YXIgaGlnaGxpZ2h0aW5nJylcblx0XHRcdC5zZXREZXNjKCdTaWducyBhbmQgc3ltYm9scyB3cml0dGVuIGFib3ZlIG9yIGJlbG93IGxldHRlcnMgd2lsbCBiZSBoaWdobGlnaHRlZCcpXG5cdFx0XHQuYWRkVG9nZ2xlKHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNIaWdobGlnaHRlZFRlaHRhcilcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmlzSGlnaGxpZ2h0ZWRUZWh0YXIgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5yZWZyZXNoKCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdC5zZXROYW1lKCdDb2xvcicpXG5cdFx0LnNldERlc2MoJ0NvbG9yIG9mIGhpZ2hsaWdodGVkIFRlaHRhcnMnKVxuXHRcdC5hZGRDb2xvclBpY2tlcihjb2xvciA9PiBjb2xvclxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRlaHRhckNvbG9yKVxuXHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZWh0YXJDb2xvciA9IHZhbHVlO1xuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdH0pKTtcblx0XHRcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnVGVuZ3dhciBDU1VSIGZvbnQnKVxuXHRcdC5zZXREZXNjKCdJbiBQcm9ncmVzcycpXG5cdFx0LmFkZERyb3Bkb3duKHRleHQgPT4gdGV4dFxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbmdGb250KVxuXHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW5nRm9udCA9IHZhbHVlO1xuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdH0pKTtcblx0XHRcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnVGVuZ3dhciBmb250Jylcblx0XHQuc2V0RGVzYygnSW4gUHJvZ3Jlc3MnKVxuXHRcdC5hZGREcm9wZG93bih0ZXh0ID0+IHRleHRcblx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW5nRm9udClcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudGVuZ0ZvbnQgPSB2YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR9KSk7XG5cdH1cbn1cbiIsICIvKipcbiAqIEFsbCB0ZW5nd2FyIHN5bWJvbHMgaW4gQ1NVUlxuICogbW9yZSBpbmZvOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25TY3JpcHRfVW5pY29kZV9SZWdpc3RyeVxuICogXG4gKiBUaGUgcmFuZ2Ugb2YgY29kZXMgaXMgdGFrZW4gZnJvbSBXaWtpcGVkaWFcbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Rlbmd3YXJcbiAqL1xuZXhwb3J0IGNvbnN0IFRFTkdXQVJfQ1NVUl9SRUdfRVhQID0gL1tcXHVFMDAwLVxcdUUwNkVdKy9nO1xuXG4vKipcbiAqIFNwZWNpYWwgdGVuZ3dhciBzeW1ib2xzIChUZWh0YXIpXG4gKiBcbiAqIFRoZSByYW5nZSBvZiBjb2RlcyBpcyB0YWtlbiBmcm9tIFdpa2lwZWRpYVxuICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGVuZ3dhclxuICovXG5leHBvcnQgY29uc3QgVEVOR1dBUl9URUhUQVJfQ1NVUl9SRUdfRVhQID0gL1tcXHVFMDQwLVxcdUUwNURdKy9nO1xuIiwgImltcG9ydCB7IFBsdWdpbkNvZGVCbG9ja1Byb2Nlc3NvciB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XG5pbXBvcnQgeyBURU5HV0FSX0NTVVJfUkVHX0VYUCwgVEVOR1dBUl9URUhUQVJfQ1NVUl9SRUdfRVhQIH0gZnJvbSBcIi4uL2RvbWFpbi9lbnRpdHkvY3N1clRlbmd3YXJcIjtcbmltcG9ydCB7IEVuY29kaW5nIH0gZnJvbSBcIi4uL2RvbWFpbi9lbnRpdHkvZW5jb2RpbmdcIjtcbmltcG9ydCB7IFBsdWdpblNldHRpbmdzIH0gZnJvbSBcImZlYXR1cmUvc2V0dGluZ3MvZG9tYWluL2VudGl0eS9wbHVnaW4tc2V0dGluZ3NcIjtcblxuZXhwb3J0IGNvbnN0IHByb2Nlc3NDc3VyID0gKHNvdXJjZTogc3RyaW5nLCBzZXR0aW5nczogUGx1Z2luU2V0dGluZ3MpOiBzdHJpbmcgPT4ge1xuXHRjb25zdCBjbGFzc05hbWUgPSAndGVuZ3dhci1mb3JtYWwtY3N1cidcblxuXHRjb25zdCBpbm5lckhUTUwgPSBzZXR0aW5ncy5pc0hpZ2hsaWdodGVkVGVodGFyID8gaGlnaGxpZ2h0Q3N1clRlaHRhcnMoc291cmNlLCBzZXR0aW5ncykgOiBzb3VyY2VcblxuXHRyZXR1cm4gYDxkaXYgY2xhc3M9XCIke2NsYXNzTmFtZX1cIj4ke2lubmVySFRNTH08L2Rpdj5gXG59XG5cbmV4cG9ydCBjb25zdCBoaWdobGlnaHRDc3VyVGVodGFycyA9IChzb3VyY2U6IHN0cmluZywgc2V0dGluZ3M6IFBsdWdpblNldHRpbmdzKTogc3RyaW5nID0+IHtcblx0cmV0dXJuIHNvdXJjZS5yZXBsYWNlQWxsKFxuXHRcdFRFTkdXQVJfVEVIVEFSX0NTVVJfUkVHX0VYUCxcblx0XHQodGVodGFyOiBzdHJpbmcpID0+IGA8c3BhbiBjbGFzcz1cInRlaHRhclwiIHN0eWxlPVwiY29sb3I6ICR7c2V0dGluZ3MudGVodGFyQ29sb3J9XCI+JHt0ZWh0YXJ9PC9zcGFuPmAsXG5cdClcbn1cblxuZXhwb3J0IGNvbnN0IHByb2Nlc3NBc2NpaSA9IChzb3VyY2U6IHN0cmluZyk6IHN0cmluZyA9PiB7XG5cdGNvbnN0IGNsYXNzTmFtZSA9ICd0ZW5nd2FyLWFubmF0YXInO1xuXG5cdHJldHVybiBgPGRpdiBjbGFzcz1cIiR7Y2xhc3NOYW1lfVwiPiR7c291cmNlfTwvZGl2PmBcbn1cblxuZXhwb3J0IGNvbnN0IGdldEVuY29kaW5nID0gKHNvdXJjZTogc3RyaW5nKTogRW5jb2RpbmcgPT4ge1xuXHRpZiAoVEVOR1dBUl9DU1VSX1JFR19FWFAudGVzdChzb3VyY2UpKSB7XG5cdFx0cmV0dXJuICdDU1VSJ1xuXHR9XG5cblx0cmV0dXJuICdBU0NJSSc7XG59XG5cbmV4cG9ydCBjb25zdCBwcm9jZXNzVGVuZ3dhciA9IChzb3VyY2U6IHN0cmluZywgc2V0dGluZ3M6IFBsdWdpblNldHRpbmdzKTogc3RyaW5nID0+IHtcblx0Y29uc3QgaW5uZXJIVE1MID0gc291cmNlLnJlcGxhY2VBbGwoL1xcbi9nLCAnPGJyIC8+Jyk7XG5cblx0c3dpdGNoIChnZXRFbmNvZGluZyhzb3VyY2UpKSB7XG5cdFx0Y2FzZSAnQ1NVUic6IHJldHVybiBwcm9jZXNzQ3N1cihpbm5lckhUTUwsIHNldHRpbmdzKTtcblx0XHRjYXNlICdBU0NJSSc6IHJldHVybiBwcm9jZXNzQXNjaWkoaW5uZXJIVE1MKTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgdGVuZ1Byb2Nlc3NvcjogUGx1Z2luQ29kZUJsb2NrUHJvY2Vzc29yID0gKHNldHRpbmdzKSA9PiAoc291cmNlLCBlbCwgX2N0eCkgPT4ge1xuXHRlbC5pbm5lckhUTUwgPSBwcm9jZXNzVGVuZ3dhcihzb3VyY2UsIHNldHRpbmdzKTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7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
