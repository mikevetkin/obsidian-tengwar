/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianTengwar
});
module.exports = __toCommonJS(main_exports);

// feature/settings/domain/entity/plugin-settings.ts
var pluginSettings = (data = {}) => ({
  isHighlightedTehtar: false,
  tehtarColor: "",
  tengCsurFont: "",
  tengFont: "",
  ...data
});

// feature/settings/domain/entity/default-plugin-settings.ts
var DEFAULT_PLUGIN_SETTINGS = pluginSettings({
  isHighlightedTehtar: true,
  tehtarColor: "#A78AF9",
  tengFont: "Tengwar Annatar",
  tengCsurFont: "Tengwar Formal CSUR"
});

// feature/settings/ui/settings-tab.ts
var import_obsidian = require("obsidian");
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Turn on Tehtar highlighting").setDesc("Signs and symbols written above or below letters will be highlighted").addToggle((text) => text.setValue(this.plugin.settings.isHighlightedTehtar).onChange(async (value) => {
      this.plugin.settings.isHighlightedTehtar = value;
      await this.plugin.saveSettings();
      this.plugin.refresh();
    }));
    new import_obsidian.Setting(containerEl).setName("Color").setDesc("Color of highlighted Tehtars").addColorPicker((color) => color.setValue(this.plugin.settings.tehtarColor).onChange(async (value) => {
      this.plugin.settings.tehtarColor = value;
      await this.plugin.saveSettings();
      this.plugin.refresh();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar CSUR font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).setDisabled(true).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
      this.plugin.refresh();
    }));
    new import_obsidian.Setting(containerEl).setName("Tengwar font").setDesc("In Progress").addDropdown((text) => text.setValue(this.plugin.settings.tengFont).setDisabled(true).onChange(async (value) => {
      this.plugin.settings.tengFont = value;
      await this.plugin.saveSettings();
      this.plugin.refresh();
    }));
  }
};

// feature/tengwar/domain/entity/csurTengwar.ts
var TENGWAR_CSUR_REG_EXP = /[^\uE000-\uE06E]/;
var TENGWAR_TEHTAR_CSUR_REG_EXP = /[\uE040-\uE05D]+/g;

// feature/tengwar/ui/teng-processor.ts
var addTehtarSpans = (source, settings) => {
  return source.replaceAll(
    TENGWAR_TEHTAR_CSUR_REG_EXP,
    (tehtar) => `<span class="tehtar" style="color: ${settings.isHighlightedTehtar ? settings.tehtarColor : "unset"}">${tehtar}</span>`
  );
};
var changeTehtar = (source, settings) => {
  const elements = document.querySelectorAll(".tehtar");
  elements.forEach((element) => {
    element.style.color = settings.isHighlightedTehtar ? settings.tehtarColor : "unset";
  });
  return source;
};
var getEncoding = (source) => {
  const isCSUR = TENGWAR_CSUR_REG_EXP.test(source);
  console.log("isCSUR :>> ", isCSUR, source);
  if (isCSUR) {
    return "CSUR";
  }
  return "ASCII";
};
var addBrs = (source, settings) => {
  const innerHTML = source.replaceAll("\n", "<br />");
  return innerHTML;
};
var addTengwarFontClass = (encoding) => {
  switch (encoding) {
    case "CSUR":
      return "tengwar-formal-csur";
    case "ASCII":
      return "tengwar-annatar";
  }
};
var tengProcessor = (settings) => (source, el, _ctx) => {
  const encoding = getEncoding(source);
  el.innerHTML = addTehtarSpans(addBrs(source, settings), settings);
  el.id = "teng";
  el.classList.add(addTengwarFontClass(encoding));
};

// main.ts
var import_obsidian2 = require("obsidian");
var ObsidianTengwar = class extends import_obsidian2.Plugin {
  refresh() {
    const elements = document.querySelectorAll("#teng");
    elements.forEach((element) => {
      element.innerHTML = changeTehtar(element.innerHTML, this.settings);
    });
  }
  async onload() {
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor("teng", tengProcessor(this.settings));
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_PLUGIN_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
